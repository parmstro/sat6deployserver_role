---
# name: call API from Satellite
#  hosts: localhost
#  gather_facts: no
#  vars:
#    satBaseURL: https://sat6.parmstrong.ca/api/v2/
#    satOrgURL: "{{ satBaseURL }}organizations/"
#    satLocURL: "{{ satBaseURL }}locations/"
#    satHostGroupURL: "{{ satBaseURL }}hostgroups/"
#    satComputeResourceURL: "{{ satBaseURL }}compute_resources/"
#    satDiscoveredHostsURL: "{{ satBaseURL }}discovered_hosts/"
#    satHostsURL: "{{ satBaseURL }}hosts/"
#    satUser: yer_user
#    satPass: yer_passwd
#    satOrganizationName: RedHatCanada
#    satLocationName: Hespeler
#    satHostGroupName: ocp
#    satComputeResourceType: Baremetal
#    satComputeResourceName: ''
#    satHostIPAddr: 10.0.0.33
#    satHostName: ocpnode3
#    satBMHNumberOfNICs: 3 
# Made a change
#
#
- name: get the list of organizations 
  uri:
    url: "{{ satOrgURL }}"
    method: GET 
    user: "{{ satUser }}"
    password: "{{ satPass }}"
    force_basic_auth: yes 
    validate_certs: no
  register: orgdata

- name: set the organization_id for "{{ satOrganizationName }}"
  set_fact: satOrganizationID={{ orgdata.json | json_query(satOrgIDQuery) }}
  vars:
    satOrgIDQuery: "results[?name=='{{ satOrganizationName }}'].id"

- name: output the OrgID
  debug: msg={{ satOrganizationID }}

- name: get the list of location
  uri:
    url: "{{ satLocURL }}"
    method: GET
    user: "{{ satUser }}"
    password: "{{ satPass }}"
    force_basic_auth: yes
    validate_certs: no
  register: locdata

- name: set the location_id for "{{ satLocationName }}"
  set_fact: satLocationID={{ locdata.json | json_query(satLocIDQuery) }}
  vars:
    satLocIDQuery: "results[?name=='{{ satLocationName }}'].id"

- name: output the LocationID
  debug: msg={{ satLocationID }}

- name: get the list of hostgroups
  uri:
    url: "{{ satHostGroupURL }}"
    method: GET
    user: "{{ satUser }}"
    password: "{{ satPass }}"
    force_basic_auth: yes
    validate_certs: no
  register: hostgroupdata

- name: set the hostgroup_id for "{{ satHostGroupName }}"
  set_fact: satHostGroupID={{ hostgroupdata.json | json_query(satHostGroupIDQuery) }}
  vars:
    satHostGroupIDQuery: "results[?name=='{{ satHostGroupName }}'].id"

- name: output the HostGroupID
  debug: msg={{ satHostGroupID }}

- name: get the list of compute resources
  uri:
    url: "{{ satComputeResourceURL }}"
    method: GET
    user: "{{ satUser }}"
    password: "{{ satPass }}"
    force_basic_auth: yes
    validate_certs: no
  register: computeresourcedata
  when: satComputeResourceType != "Baremetal"

- name: list the compute resources available  for "{{ satComputeResourceType }}"
  set_fact: satComputeResourceList={{ computeresourcedata.json | json_query(satComputeResourceListQuery) }}
  when: satComputeResourceType != "Baremetal"
  vars:
    satComputeResourceListQuery: "results[?provider=='{{ satComputeResourceType }}'].name"

- name: output the ComputeResourceList for "{{ satComputeResourceType }}"
  debug: msg={{ satComputeResourceList }}
  when: satComputeResourceType != "Baremetal"


- name: picking the first compute resource of type {{ satComputeResourceType }}
  set_fact: satComputeResourceName={{ satComputeResourceList[0] }}
  when: 
   - satComputeResourceType != "Baremetal"
   - satComputeResourceName == ""

- name: using Compute Resource {{ satComputeResourceName }}
  debug: msg={{ satComputeResourceName }}
  when: satComputeResourceType != "Baremetal"

- name: setting compute_resource_id
  set_fact: satComputeResourceID={{ computeresourcedata.json | json_query(satComputeResourceIDQuery) }}
  when: satComputeResourceType != "Baremetal"
  vars:
    satComputeResourceIDQuery: "results[?name=='{{ satComputeResourceName }}'].id"

- name: output the ComputeResourceID
  debug: msg={{ satComputeResourceID[0] }}
  when: satComputeResourceType != "Baremetal"

- name: get the list of discovered hosts      
  uri:
    url: "{{ satDiscoveredHostsURL }}"
    method: GET
    user: "{{ satUser }}"
    password: "{{ satPass }}"
    force_basic_auth: yes
    validate_certs: no
  register: discoveredhostsdata
  when: satComputeResourceType == "Baremetal"

- debug: msg={{ discoveredhostsdata }}
  when: satComputeResourceType == "Baremetal"

- name: list the discovered hosts available with the appropriate criteria
  set_fact: satDiscoveredHostsList={{ discoveredhostsdata.json | json_query(satDiscoveredHostsListQuery) }}
  when: satComputeResourceType == "Baremetal"
  vars:
    satDiscoveredHostsListQuery: "results[?(model_name=='LabRat MAAS' && mac=='ec:a8:6b:f1:e4:d4')].mac"

- name: output the DiscoveredHostsList for model "LabRat MAAS"
  debug: msg={{ satDiscoveredHostsList }}
  when: satComputeResourceType == "Baremetal"

- name: setting the BareMetalHost Mac address
  set_fact: satBMHMac={{ satDiscoveredHostsList[0] }}
  when: satComputeResourceType == "Baremetal"

- name: generate VM payload
  set_fact: payload="{'host':{'organization_id':{{ satOrganizationID[0] }},'location_id':{{ satLocationID[0] }},'name':'{{ satHostName }}','mac':'52:54:00:ff:ff:ff','compute_resource_id':{{ satComputeResourceID[0] }},'ip':'{{ satHostIPAddr }}','build':'true','enabled':'true','powerup':1,'hostgroup_id':{{ satHostGroupID[0] }},'comment':'Added via ansible'}}"
  when: satComputeResourceType != "Baremetal"

- name: generate BareMetal payload
  set_fact: payload="{'host':{'organization_id':{{ satOrganizationID[0] }},'location_id':{{ satLocationID[0] }},'name':'{{ satHostName }}','mac':'{{ satBMHMac }}','ip':'{{ satHostIPAddr }}','build':'true','enabled':'true','powerup':1,'hostgroup_id':{{ satHostGroupID[0] }},'comment':'Added via ansible'}}"
  when: satComputeResourceType == "Baremetal"

- name: building system with the following settings
  debug: msg={{ payload }}

- name: Creating the new server
  uri:
    url: '{{ satHostsURL }}'
    method: POST
    user: "{{ satUser }}"
    password: "{{ satPass }}"
    force_basic_auth: yes
    validate_certs: no
    status_code: 201
    headers:
      Content-Type: application/json
      Accept: :application/json,version=2
    body_format: json
    body: >
      {{ payload }}
  register: hostcreatedata
      
- name: output return data
  debug: msg={{ hostcreatedata }}

- name: generate restart payload
  set_fact: payload={'power_action':'start'}
  when: satComputeResourceType != "Baremetal"

- name: generate restart payload
  set_fact: payload={'power_action':'reset'}
  when: satComputeResourceType == "Baremetal"

- name: restart the host 
  uri:
    url: '{{ satHostsURL }}/{{ satHostName }}.parmstrong.ca/power'
    method: PUT
    user: "{{ satUser }}"
    password: "{{ satPass }}"
    force_basic_auth: yes
    validate_certs: no
    status_code: 201
    headers:
      Content-Type: application/json
      Accept: :application/json,version=2
    body_format: json
    body: >
      {{ payload }}
  register: hostrestartdata

- name: output return data
  debug: msg={{ hostrestartdata }}

